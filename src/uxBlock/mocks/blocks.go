// Code generated by MockGen. DO NOT EDIT.
// Source: blocks.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logger "github.com/zeropsio/zcli/src/logger"
	uxBlock "github.com/zeropsio/zcli/src/uxBlock"
	styles "github.com/zeropsio/zcli/src/uxBlock/styles"
)

// MockUxBlocks is a mock of UxBlocks interface.
type MockUxBlocks struct {
	ctrl     *gomock.Controller
	recorder *MockUxBlocksMockRecorder
}

// MockUxBlocksMockRecorder is the mock recorder for MockUxBlocks.
type MockUxBlocksMockRecorder struct {
	mock *MockUxBlocks
}

// NewMockUxBlocks creates a new mock instance.
func NewMockUxBlocks(ctrl *gomock.Controller) *MockUxBlocks {
	mock := &MockUxBlocks{ctrl: ctrl}
	mock.recorder = &MockUxBlocksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUxBlocks) EXPECT() *MockUxBlocksMockRecorder {
	return m.recorder
}

// GetDebugFileLogger mocks base method.
func (m *MockUxBlocks) GetDebugFileLogger() logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebugFileLogger")
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// GetDebugFileLogger indicates an expected call of GetDebugFileLogger.
func (mr *MockUxBlocksMockRecorder) GetDebugFileLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebugFileLogger", reflect.TypeOf((*MockUxBlocks)(nil).GetDebugFileLogger))
}

// GetOutputLogger mocks base method.
func (m *MockUxBlocks) GetOutputLogger() logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputLogger")
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// GetOutputLogger indicates an expected call of GetOutputLogger.
func (mr *MockUxBlocksMockRecorder) GetOutputLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputLogger", reflect.TypeOf((*MockUxBlocks)(nil).GetOutputLogger))
}

// LogDebug mocks base method.
func (m *MockUxBlocks) LogDebug(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogDebug", message)
}

// LogDebug indicates an expected call of LogDebug.
func (mr *MockUxBlocksMockRecorder) LogDebug(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogDebug", reflect.TypeOf((*MockUxBlocks)(nil).LogDebug), message)
}

// PrintError mocks base method.
func (m *MockUxBlocks) PrintError(line styles.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintError", line)
}

// PrintError indicates an expected call of PrintError.
func (mr *MockUxBlocksMockRecorder) PrintError(line interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintError", reflect.TypeOf((*MockUxBlocks)(nil).PrintError), line)
}

// PrintInfo mocks base method.
func (m *MockUxBlocks) PrintInfo(line styles.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintInfo", line)
}

// PrintInfo indicates an expected call of PrintInfo.
func (mr *MockUxBlocksMockRecorder) PrintInfo(line interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintInfo", reflect.TypeOf((*MockUxBlocks)(nil).PrintInfo), line)
}

// PrintWarning mocks base method.
func (m *MockUxBlocks) PrintWarning(line styles.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintWarning", line)
}

// PrintWarning indicates an expected call of PrintWarning.
func (mr *MockUxBlocksMockRecorder) PrintWarning(line interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintWarning", reflect.TypeOf((*MockUxBlocks)(nil).PrintWarning), line)
}

// Prompt mocks base method.
func (m *MockUxBlocks) Prompt(ctx context.Context, message string, choices []string, auxOptions ...uxBlock.PromptOption) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, message, choices}
	for _, a := range auxOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prompt", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockUxBlocksMockRecorder) Prompt(ctx, message, choices interface{}, auxOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, message, choices}, auxOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockUxBlocks)(nil).Prompt), varargs...)
}

// RunSpinners mocks base method.
func (m *MockUxBlocks) RunSpinners(ctx context.Context, spinners []*uxBlock.Spinner) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSpinners", ctx, spinners)
	ret0, _ := ret[0].(func())
	return ret0
}

// RunSpinners indicates an expected call of RunSpinners.
func (mr *MockUxBlocksMockRecorder) RunSpinners(ctx, spinners interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSpinners", reflect.TypeOf((*MockUxBlocks)(nil).RunSpinners), ctx, spinners)
}

// Select mocks base method.
func (m *MockUxBlocks) Select(ctx context.Context, tableBody *uxBlock.TableBody, auxOptions ...uxBlock.SelectOption) ([]int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, tableBody}
	for _, a := range auxOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockUxBlocksMockRecorder) Select(ctx, tableBody interface{}, auxOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, tableBody}, auxOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockUxBlocks)(nil).Select), varargs...)
}

// Table mocks base method.
func (m *MockUxBlocks) Table(body *uxBlock.TableBody, auxOptions ...uxBlock.TableOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{body}
	for _, a := range auxOptions {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Table", varargs...)
}

// Table indicates an expected call of Table.
func (mr *MockUxBlocksMockRecorder) Table(body interface{}, auxOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{body}, auxOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockUxBlocks)(nil).Table), varargs...)
}
